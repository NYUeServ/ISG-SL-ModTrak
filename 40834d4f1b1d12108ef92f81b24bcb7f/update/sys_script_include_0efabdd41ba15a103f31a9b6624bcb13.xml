<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_neyu_modtrak.ChangeHelper</api_name>
        <caller_access>1</caller_access>
        <client_callable>false</client_callable>
        <description/>
        <name>ChangeHelper</name>
        <script><![CDATA[var ChangeHelper = Class.create();
ChangeHelper.prototype = {
    initialize: function() {
        this.debug = (gs.getProperty("x_neyu_modtrak.debug", "false") == "true");
    },

    /**
     * Validates that required fields are present in the request
     * 
     * @returns - {object} object containing whether there was an error
     * 				and any missing fields
     */
    validateChangePOST: function(request) {

        // get required keys depending on whether template_id is included or not
        const requiredKeys = Object.hasOwn(request, "template_id") ?
            ChangeHelper.REQ_TEMPLATE_PARAMS :
            Object.keys(ChangeHelper.POST_PARAMS_MAP);

        // find all the required keys that are not present in the request
        const missingKeys = requiredKeys.filter((k) => !Object.hasOwn(request, k));

        if (missingKeys && missingKeys.length > 0) {
            return {
                error: true,
                errorMessage: missingKeys.map((k) => `${k} is required`).join("\n"),
                status: 400
            };
        }

        // check that standard change template is valid
        if (Object.hasOwn(request, "template_id") &&
            gs.nil(global.StandardChangeTemplate.findById(request.template_id))) {
            return {
                error: true,
                errorMessage: "template is not valid",
                status: 400
            };
        }

        // everything looks good
        return {
            error: false,
            errorMessage: ""
        };
    },

    /**
     * Validates that required fields are present in the request
     * 
     * @returns - {object} object containing whether there was an error
     * 				and any missing fields
     */
    validateClosePOST: function(request) {
        const requiredKeys = ChangeHelper.CLOSE_REQ_PARAMS;

        const missingKeys = requiredKeys.filter((k) => !Object.hasOwn(request, k));

        if (missingKeys && missingKeys.length > 0) {
            return {
                error: true,
                errorMessage: missingKeys.map((k) => `${k} is required`).join("\n"),
                status: 400
            };
        }

        return {
            error: false,
            errorMessage: ""
        };
    },

    /**
     * Validates that the indicated ModTrak is valid and submits
     * an Update Request to close the Change.
     */
    createCloseRequest: function(request) {
        // TODO check to see if there isn't already a close request for the spsecified change
        const changeGR = new GlideRecordSecure("change_request");
        changeGR.addQuery("correlation_display", ChangeHelper.CORRELATION_KEY);
        changeGR.addQuery("correlation_id", request.modtrak_number);
        changeGR.setLimit(1);
        changeGR.query();

        if (changeGR.next()) {
            // check to see if a request hasn't already been created
            if (this._closeRequestExists(changeGR)) {
                return {
                    error: true,
                    status: 400,
                    errorMessage: "A Close Request has already been created."
                };
            }

            // create an Update Request record, which will handle closing the change
            var shortDesc = "Close Request for ModTrak " + request.modtrak_number.toString();

            const updateReq = new GlideRecordSecure(ChangeHelper.CLOSE_REQ_TABLE);
            updateReq.initialize();
            updateReq.setValue("change_request", changeGR.getValue("sys_id"));
            updateReq.setValue("short_description", shortDesc);
            updateReq.setValue("closure_state", request.state);

            const reqId = updateReq.insert();
            if (gs.nil(reqId)) {
                // there was an error inserting the record
                return {
                    error: true,
                    status: 500,
                    errorMessage: updateReq.getLastErrorMessage()
                };
            }
            // all good!
            return {
                error: false,
                errorMessage: "",
                data: {
                    close_request_id: reqId
                }
            };
        } else {
            return {
                error: true,
                errorMessage: "Unable to location ModTrak " + request.modtrak_number,
                status: 400
            };
        }
    },

    _closeRequestExists: function(changeGR) {
        const reqGR = new GlideRecord(ChangeHelper.CLOSE_REQ_TABLE);
        reqGR.addQuery("change_request", changeGR.getUniqueValue());
        reqGR.query();

        return reqGR.hasNext();
    },

    /**
     * Creates a new change request given the validated request data
     * 
     * @param request {object} - the HTTP POST Request Body
     * @return {object} - The payload to return to the requestor
     */
    createChange: function(request) {
        if (this.debug) {
            gs.info("Create Change Request\nparams: " + JSON.stringify(request));
        }
        return gs.nil(request.template_id) ?
            this._createChange(request) :
            this._createStdChange(request);
    },

    _createStdChange: function(params) {
        const templateId = params.template_id;
        delete params.template_id;

        var stdChangeProcess = global.StandardChangeProcess
            .newChangeProcess(templateId, params);

        stdChangeProcess.setValue("correlation_display",
            x_neyu_modtrak.ModTrakAPI.CONSTANTS.CORRELATION_DISPLAY);
        stdChangeProcess.setValue("correlation_id", params.modtrak_number);
        // standard changes default risk & impact to low
        stdChangeProcess.setValue("risk", 4);
        stdChangeProcess.setValue("impact", 3);
        stdChangeProcess.insert();

        const result = {
            data: {
                sys_id: stdChangeProcess.getGlideRecord().getValue("sys_id"),
                number: stdChangeProcess.getGlideRecord().getValue("number")
            }
        };
        return result;
    },

    _createChange: function(params) {
        var changeGR = new GlideRecord("change_request");
        changeGR.initialize();

        Object.keys(params).forEach((k) =>
            changeGR.setValue(
                ChangeHelper.POST_PARAMS_MAP[k], this._resolveValue(params[k], ChangeHelper.POST_PARAMS_MAP[k])
            )
        );

		if (params.service_offering) {
			var svcGR = new GlideRecordSecure("service_offering");
			// set the Service
			if (svcGR.get("sys_id", params.service_offering)) {
				changeGR.setValue("business_service", svcGR.getValue("parent"));
			}
			// set the CI
			changeGR.setValue("cmdb_ci", params.service_offering);
		}

        changeGR.setValue("correlation_display", ChangeHelper.CORRELATION_KEY);
        // set change model
        const chgModel = this._findChgModel(params.type);
        if (gs.nil(chgModel)) {
            return {
                error: true,
                errorMessage: "Unable to locate change model for type",
                status: 400
            };
        }

        changeGR.setValue("model", chgModel);
        changeGR.insert();
        const result = {
            data: {
                sys_id: changeGR.getValue("sys_id"),
                number: changeGR.getValue("number")
            }
        };
        return result;
    },

    _resolveValue: function(value, key) {
        switch (key) {
            case "requested_by":
                var userGR = new GlideRecordSecure("sys_user");
                userGR.get("user_name", value);
                return userGR.getValue("sys_id");
            case "service_offering":
                var svcGR = new GlideRecordSecure("service_offering");
                svcGR.get("sys_id", value);
                return svcGR.getValue("sys_id");
            default:
                return value;
        }
    },

    _findChgModel: function(type) {
        var chgModel = new GlideRecordSecure("chg_model");
        chgModel.addQuery("name", type);
        chgModel.setLimit(1);
        chgModel.query();

        if (chgModel.next()) {
            return chgModel.getValue("sys_id");
        } else {
            return null;
        }
    },

    type: 'ChangeHelper'
};

ChangeHelper.CORRELATION_KEY = "ModTrak";
ChangeHelper.CLOSE_REQ_TABLE = "x_neyu_modtrak_update_request";
ChangeHelper.POST_PARAMS_MAP = {
    "requested_by": "requested_by",
    "short_description": "short_description",
    "description": "description",
    "start_date": "start_date",
    "modtrak_number": "correlation_id",
    "service_offering": "service_offering",
    "state": "state",
    "end_date": "end_date"
};
ChangeHelper.REQ_TEMPLATE_PARAMS = [
    "template_id",
    "requested_by",
    "start_date",
    "modtrak_number",
    "end_date",
];
ChangeHelper.CLOSE_REQ_PARAMS = [
    "modtrak_number",
    "state"
];]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>ab7289</sys_created_by>
        <sys_created_on>2024-10-25 17:50:32</sys_created_on>
        <sys_id>0efabdd41ba15a103f31a9b6624bcb13</sys_id>
        <sys_mod_count>75</sys_mod_count>
        <sys_name>ChangeHelper</sys_name>
        <sys_package display_value="ModTrak" source="x_neyu_modtrak">40834d4f1b1d12108ef92f81b24bcb7f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ModTrak">40834d4f1b1d12108ef92f81b24bcb7f</sys_scope>
        <sys_update_name>sys_script_include_0efabdd41ba15a103f31a9b6624bcb13</sys_update_name>
        <sys_updated_by>ab7289</sys_updated_by>
        <sys_updated_on>2024-12-18 19:44:48</sys_updated_on>
    </sys_script_include>
</record_update>
